# -*- encoding: utf-8 -*-
###########################################################################
#    Module Writen to OpenERP, Open Source Management Solution
#
#    
############################################################################
#    Coded by: 
#    
############################################################################
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from openerp.tools.translate import _
from openerp.osv import fields, osv, orm
from openerp import tools
from openerp import netsvc
from openerp.tools.misc import ustr
import wizard
import base64
import xml.dom.minidom
import time
import StringIO
import csv
import tempfile
import os
import sys
import codecs
from xml.dom import minidom
import urllib
import pooler
from openerp.tools.translate import _
from datetime import datetime, timedelta
from pytz import timezone
import pytz
import time
from openerp import tools
from suds.client import Client
import logging
import base64
from string import maketrans

logging.basicConfig(level=logging.INFO)
_logger = logging.getLogger(__name__)


class ir_attachment_facturae_mx(osv.Model):
    _inherit = 'ir.attachment.facturae.mx'

    def _get_type(self, cr, uid, ids=None, context=None):
        if context is None:
            context = {}
        types = super(ir_attachment_facturae_mx, self)._get_type(
            cr, uid, ids, context=context)
        types.extend([
            ('cfdi32_pac_finkok', 'CFDI 3.2 Finkok'),
        ])
        return types
    

    def get_driver_fc_cancel(self):
        
        factura_mx_type__fc = super(ir_attachment_facturae_mx, self).get_driver_fc_cancel()
        if factura_mx_type__fc == None:
            factura_mx_type__fc = {}
        factura_mx_type__fc.update({'cfdi32_pac_finkok': self.sf_cancel})
        return factura_mx_type__fc


    def get_driver_fc_sign(self):
        factura_mx_type__fc = super(ir_attachment_facturae_mx, self).get_driver_fc_sign()
        if factura_mx_type__fc == None:
            factura_mx_type__fc = {}
        factura_mx_type__fc.update({'cfdi32_pac_finkok': self._upload_ws_file})
        return factura_mx_type__fc
    

    _columns = {
        'type': fields.selection(_get_type, 'Type', type='char', size=64,
                                 required=True, readonly=True, help="Type of Electronic Invoice"),
    }
    
    
    
    def sf_cancel(self, cr, uid, ids, context=None):
        try:
       
            if context is None:
                context = {}
            msg = ''
            certificate_obj = self.pool.get('res.company.facturae.certificate')
            pac_params_obj = self.pool.get('params.pac')
            invoice_obj = self.pool.get('account.invoice')
            for ir_attachment_facturae_mx_id in self.browse(cr, uid, ids, context=context):
                status = False
                invoice = ir_attachment_facturae_mx_id.invoice_id

                pac_params_ids = pac_params_obj.search(cr, uid, [
                    ('method_type', '=', 'cancel'),
                    ('company_id', '=', invoice.company_emitter_id.id),
                    ('active', '=', True),
                ], limit=1, context=context)
                pac_params_id = pac_params_ids and pac_params_ids[0] or False

                if pac_params_id:
                    file_globals = invoice_obj._get_file_globals(
                        cr, uid, [invoice.id], context=context)
                    pac_params_brw = pac_params_obj.browse(
                        cr, uid, [pac_params_id], context=context)[0]


                    user = pac_params_brw.user
                    password = pac_params_brw.password
                    wsdl_url = pac_params_brw.url_webservice
                    namespace = pac_params_brw.namespace
                    
                    client = False
                    client = Client(wsdl_url, cache=None)
                    
                    
                    fname_cer_no_pem = file_globals['fname_cer']
                    cerCSD = fname_cer_no_pem and base64.encodestring(
                        open(fname_cer_no_pem, "r").read()) or ''
                    fname_key_no_pem = file_globals['fname_key']
                    keyCSD = fname_key_no_pem and base64.encodestring(
                        open(fname_key_no_pem, "r").read()) or ''

                    contrasenaCSD = file_globals.get('password', '')

                    uuids = invoice.cfdi_folio_fiscal # cfdi_folio_fiscal
                     
                    invoices_list = client.factory.create("UUIDS")
                    
                    invoices_list.uuids.string = uuids


                   
                    

                    rfc_emisor = 'AAD990814BP7' #Debe ser el RFC emisor del emisor


                    import pdb; pdb.set_trace()

                    result = client.service.cancel(invoices_list, user, password, rfc_emisor, cerCSD, keyCSD)
                    

                    folio_cancel = result['Folios'] and result['Folios']['Folio'] and result['Folios']['Folio'][0]['UUID'] or ''
                    
                        
                    codigo_cancel = result['Folios'] and result['Folios']['Folio'] and result['Folios']['Folio'][0]['EstatusUUID'] or ''
                    

                    status_uuid = result['Folios'] and result['Folios']['Folio'] and result['Folios']['Folio'][0]['EstatusUUID'] or ''
                    

                    mensaje_cancel = 'UUID Cancelado exitosamente'


                    acuse_cancel = result['Acuse'] or ''
                    

                    
                    
                    if int(codigo_cancel) in (201, 202):
                                        
                        msg =  mensaje_cancel + _('\n-El proceso de cancelacion se ha completado correctamente. El uuid cancelado es: ') + folio_cancel
                        invoice_obj.write(cr, uid, [invoice.id], {
                            'cfdi_fecha_cancelacion': time.strftime(
                            '%Y-%m-%d %H:%M:%S')
                        })
                        status = True

                    else:
                        return {'codigo_cancel':codigo_cancel, 'folio_cancel':folio_cancel}
                        #raise orm.except_orm(_('Warning'), _('Cancel Code: %s.- Folio Cancel: %s.') % (codigo_cancel, folio_cancel))
                else:
                    msg = _('Not found information of webservices of PAC, verify that the configuration of PAC is correct')
            

            return {'message': msg, 'status_uuid': status_uuid, 'status': status}

        except Exception as e:
            return {'status':False, 'message': 'Error al cancelar, el comprobante aun no ha sido timbrado... Intente m√°s tarde por favor.'}
            

    
    def _upload_ws_file(self, cr, uid, ids, fdata=None, context=None):
        """
        @params fdata : File.xml codification in base64
        """
        if context is None:
            context = {}
        invoice_obj = self.pool.get('account.invoice')
        pac_params_obj = invoice_obj.pool.get('params.pac')
        for ir_attachment_facturae_mx_id in self.browse(cr, uid, ids, context=context):
            invoice = ir_attachment_facturae_mx_id.invoice_id
            comprobante = invoice_obj._get_type_sequence(
                cr, uid, [invoice.id], context=context)
            cfd_data = base64.decodestring(fdata or invoice_obj.fdata)
            xml_res_str = xml.dom.minidom.parseString(cfd_data)
            xml_res_addenda = invoice_obj.add_addenta_xml(
                cr, uid, xml_res_str, comprobante, context=context)
            xml_res_str_addenda = xml_res_addenda.toxml('UTF-8')
            xml_res_str_addenda = xml_res_str_addenda.replace(codecs.BOM_UTF8, '')
            
            if tools.config['test_report_directory']:#TODO: Add if test-enabled:
                ir_attach_facturae_mx_file_input = ir_attachment_facturae_mx_id.file_input and ir_attachment_facturae_mx_id.file_input or False
                fname_suffix = ir_attach_facturae_mx_file_input and ir_attach_facturae_mx_file_input.datas_fname or ''
                open( os.path.join(tools.config['test_report_directory'], 'l10n_mx_facturae_pac_finkok' + '_' + \
                  'before_upload' + '-' + fname_suffix), 'wb+').write( xml_res_str_addenda )
            compr = xml_res_addenda.getElementsByTagName(comprobante)[0]
            date = compr.attributes['fecha'].value
            date_format = datetime.strptime(
                date, '%Y-%m-%dT%H:%M:%S').strftime('%Y-%m-%d')
            context['date'] = date_format
            invoice_ids = [invoice.id]
            file = False
            msg = ''
            cfdi_xml = False
            pac_params_ids = pac_params_obj.search(cr, uid, [
                ('method_type', '=', 'stamp'), (
                    'company_id', '=', invoice.company_emitter_id.id), (
                        'active', '=', True)], limit=1, context=context)
            
            if pac_params_ids:
                pac_params = pac_params_obj.browse(
                    cr, uid, pac_params_ids, context)[0]
                user = pac_params.user
                password = pac_params.password
                wsdl_url = pac_params.url_webservice
                namespace = pac_params.namespace
                url = 'https://facturacion.finkok.com/servicios/soap/stamp.wsdl'
                testing_url = 'http://demo-facturacion.finkok.com/servicios/soap/stamp.wsdl'


                if (wsdl_url == url):
                    url = url
                elif (wsdl_url == testing_url):
                    url = testing_url
                else:
                    raise osv.except_osv(_('Warning'), _('Web Service URL¬†\
                        o PAC incorrect'))
                    
                if 'testing' in wsdl_url:
                    msg += _(u'WARNING, SIGNED IN TEST!\n\n')
               
                client = Client(url,cache=None)
                


                if True:  # if wsdl_client:
                    file_globals = invoice_obj._get_file_globals(
                        cr, uid, invoice_ids, context=context)
                    fname_cer_no_pem = file_globals['fname_cer']
                    cerCSD = fname_cer_no_pem and base64.encodestring(
                        open(fname_cer_no_pem, "r").read()) or ''
                    fname_key_no_pem = file_globals['fname_key']
                    keyCSD = fname_key_no_pem and base64.encodestring(
                        open(fname_key_no_pem, "r").read()) or ''
                    cfdi = base64.encodestring(xml_res_str_addenda)
                    cfdi = cfdi.replace('\n', '')
                              

                    import pdb; pdb.set_trace()

                   

                    resultado = client.service.stamp(cfdi,user,password)

                    #rfc = resultado['xml'] and \
                        #resultado['xml'][0]['cfdi']['Comprobante'] or ''

                    htz = int(invoice_obj._get_time_zone(
                        cr, uid, [ir_attachment_facturae_mx_id.invoice_id.id], context=context))
        


                    if resultado['Incidencias']:
                        # ERROR
                        codigo_incidencia = resultado['Incidencias'] and \
                            resultado['Incidencias']['Incidencia'] and \
                            resultado['Incidencias']['Incidencia'][0]['CodigoError'] or ''

                        mensaje_incidencia = resultado['Incidencias'] and \
                            resultado['Incidencias']['Incidencia'] and \
                            resultado['Incidencias']['Incidencia'][0]['MensajeIncidencia'] or ''

                        msg += 'Codigo error: ' + codigo_incidencia + "." + ' Descripcion: ' + mensaje_incidencia + "."   
                        return {'status':False, 'file': 'None', 'msg': msg, 'cfdi_xml': ' '}
                                            

                        #for Incidencia in resultado['Incidencias']:
                            #a = Incidencia['CodigoError']
                            #b = Incidencia['MensajeIncidencia']

                    else:
                        # EXITO

                        mensaje = _(tools.ustr(resultado['CodEstatus']))                     
                        folio_fiscal= resultado['UUID'] or ''


                        fecha_timbrado = resultado[
                            'Fecha'] or False
                        fecha_timbrado = fecha_timbrado and time.strftime(
                            '%Y-%m-%d %H:%M:%S', time.strptime(
                                fecha_timbrado[:19], '%Y-%m-%dT%H:%M:%S')) or False
                        fecha_timbrado = fecha_timbrado and datetime.strptime(
                            fecha_timbrado, '%Y-%m-%d %H:%M:%S') + timedelta(
                                hours=htz) or False


                        #version='1.0'
                        #folio_fiscal
                        #fecha_timbrado
                        #cerCSD
                        #NoCertificadoSAT='20001000000100005761'



                        #cadena_original = '||' + version + '|' + folio_fiscal + '|' + fecha_timbrado + '|' + cerCSD + '|' + NoCertificadoSAT + '||'


                        cfdi_data = {     

                            'cfdi_sello': resultado['SatSeal'] or False,
                            'cfdi_no_certificado': resultado['NoCertificadoSAT'] or False,
                            #'cfdi_cadena_original': cadena_original,                            
                            'cfdi_fecha_timbrado': fecha_timbrado,
                            'cfdi_xml': resultado['xml'] or '',  # este se necesita en uno que no es base64
                            'cfdi_folio_fiscal': resultado['UUID'] or '',
                            'pac_id': pac_params.id,
                        }

                        msg += mensaje + "." + \
                            " Folio Fiscal: " + folio_fiscal + "."
                        msg += _(
                                u"\nMake Sure to the file really has generated correctly to the SAT\nhttps://www.consulta.sat.gob.mx/sicofi_web/moduloECFD_plus/ValidadorCFDI/Validador%20cfdi.html")
                        if cfdi_data.get('cfdi_xml', False):
                            url_pac = '</"%s"><!--Para validar el XML CFDI puede descargar el certificado del PAC desde la siguiente liga: la liga de los certificados del PAC-->' % (
                                comprobante)
                            cfdi_data['cfdi_xml'] = cfdi_data[
                                'cfdi_xml'].replace('</"%s">' % (comprobante), url_pac)
                            file = base64.encodestring(
                                cfdi_data['cfdi_xml'] or '')
                            # invoice_obj.cfdi_data_write(cr, uid, [invoice.id],
                            # cfdi_data, context=context)
                            cfdi_xml = cfdi_data.pop('cfdi_xml')
                        if cfdi_xml:
                            invoice_obj.write(cr, uid, [invoice.id], cfdi_data)
                            cfdi_data['cfdi_xml'] = cfdi_xml
                        else:
                            msg += _(u"Can't extract the file XML of PAC")
                    #else:
                        #raise orm.except_orm(_('Warning'), _('Stamped Message: %s.') % (
                            #mensaje))
            else:
                msg += 'Not found information from web services of PAC, verify that the configuration of PAC is correct'
                raise osv.except_osv(_('Warning'), _(
                    'Not found information from web services of PAC, verify that the configuration of PAC is correct'))
            return {'file': file, 'msg': msg, 'cfdi_xml': cfdi_xml}

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
{}